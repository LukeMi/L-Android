import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
// apply greenDao plugin
apply plugin: 'org.greenrobot.greendao'
// 导入打包 上传蒲公英 gradle
//apply from: "pack.gradle"

def getTimeStamp() {
    SimpleDateFormat sdf = new SimpleDateFormat("-yyyy-MM-dd_HH_mm_")
    String timeStamp = sdf.format(new Date())
    return timeStamp
}

def keyProps = new Properties()

android {

    /**
     * 由于项目需要做换壳工作，因此我们需要在app的build.gradle文件中对不同项目做相应的维护处理，
     * 当我们需要切换不同的项目apk时，修改以下几点配置即可（注意蓝色字体）。
     */
    String projectName = ""

    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        keyProps.load(new FileInputStream(file("../keystore/developer/keystore.properties")))
        applicationId keyProps['APPLICATION_ID']
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v8a', 'x86_64', 'armeabi'
        }

        splits {
            abi {
                enable true
                reset()
                include 'armeabi-v8a , armeabi ' //, 'x86' ,'x86_64',   'arm64-v8a'
                universalApk true
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 资源配置
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs', 'libs/bmap', 'libs/ksoap']
            res.srcDirs = [
                    'src/main/res',
                    "src/main/res/user",
                    'src/config/res',
            ]
            java.srcDir("src/main/java")
        }
    }

    lintOptions {
        abortOnError false
    }

    //差异化打包
    // 定义项目维度
    flavorDimensions "project"
    productFlavors {
        developer {
            dimension "project"
            projectName = "developer"
            keyProps.load(new FileInputStream(file("../keystore/developer/keystore.properties")))
            buildConfigField "int", "userType", "1"
            minSdkVersion 16
            targetSdkVersion 28
            versionCode 1
            versionName "1.0"
            applicationId 'com.lukemi.android.tutorial'

            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "developer"]
        }
        user {
            dimension "project"
            keyProps.load(new FileInputStream(file("../keystore/user/keystore.properties")))
            buildConfigField "int", "userType", "2"
            minSdkVersion 14
            targetSdkVersion 28
            versionCode 1
            versionName "2.0"
            applicationId 'com.lukemi.android.tutorial.reader'
            projectName = "reader"

            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "user"]
        }

        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }

        v360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "v360"]
        }

        yinyongbao {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yinyongbao"]
        }
    }

    // 签名配置
    signingConfigs {
        release {
            storeFile file(keyProps['STORE_FILE'])
            storePassword keyProps['STORE_PASSWORD']
            keyAlias keyProps['KEY_ALIAS']
            keyPassword keyProps['KEY_PASSWORD']
            v1SigningEnabled true
            v2SigningEnabled true
        }

        /*  debug {
              storeFile file(keyProps['STORE_FILE'])
              storePassword keyProps['STORE_PASSWORD']
              keyAlias keyProps['KEY_ALIAS']
              keyPassword keyProps['KEY_PASSWORD']
          }*/
    }
    // Gradle Build 配置
    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    // 数据绑定
    dataBinding {
        enabled = true
    }

    //更改已生成apk前缀名,并更改目录
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            //只对release包作用
            if (outputFile != null && outputFile.name.endsWith('.apk') && variant.buildType.name == 'release') {
//                println(variant.productFlavors.user)
                println("compileSdkVersion : " + compileSdkVersion)
                //更换打包后的目录，以gradlew指令文件问基准目录
                variant.getPackageApplication().outputDirectory = new File("./app/apk")
                outputFileName = outputFile.name.split("\\.")[0] + "_"/* + getTimeStamp() */ + "v" + defaultConfig.versionName + ".apk"
            }
        }
    }

    //配置 DEX 选项， 使用以下属性可以缩短构建时间
    dexOptions {
        // Sets the maximum number of DEX processes
        // that can be started concurrently.
        maxProcessCount 8
        // Sets the maximum memory allocation pool size
        // for the dex operation.
        javaMaxHeapSize "4g"
        // Enables Gradle to pre-dex library dependencies.
        preDexLibraries true
    }

    android.packagingOptions {
        exclude 'META-INF/androidx.customview_customview.versionn'
    }
}

dependencies {

    //同步树//
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$rootProject.supportVersion"
    implementation "com.android.support:design:$rootProject.supportVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //webservice
    implementation files('libs/ksoap2-android-assembly-2.4-jar-with-dependencies.jar')

    //百度定位
    implementation files('libs/bmap/BaiduLBS_Android.jar')

    implementation files('libs/httpmime-4.3-sources.jar')
    implementation project(':refresh-layout')
    implementation project(':common')
    implementation project(':widget')
    implementation project(':api')
    implementation project(':xgpush')

    // Butterknife
    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"

    // RxBind
    implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.rxBindVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.rxBindVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$rootProject.rxBindVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:$rootProject.rxBindVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$rootProject.rxBindVersion"

    //    @TargetApi version 17

    //    implementation "com.jakewharton.rxbinding2:rxbinding-leanback-v17:$rootProject.rxBindVersion"

    //RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroidVersion"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    //BRVAH
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40'

    // 64 K
    implementation 'com.android.support:multidex:1.0.3'

    //daggers
    implementation "com.google.dagger:dagger:$rootProject.dagger2Version"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.dagger2Version"

    // 测试 leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakCanaryVersion"

    // Optional, if you use support library fragments:
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$rootProject.ext.leakCanaryVersion"

    //Glide加载图片

    //    implementation 'com.github.bumptech.glide:glide:3.7.0'

    //圆形图片
    implementation 'de.hdodenhof:circleimageview:2.1.0'

    //Picasso
    implementation 'com.squareup.picasso:picasso:2.5.2'

    //greendao 数据库（根build 进行maven中心库配置）
    implementation 'org.greenrobot:greendao:3.2.2'

    //事件总线
    implementation 'org.greenrobot:eventbus:3.0.0'

    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'

    //viewpager指示灯
    implementation 'me.relex:circleindicator:1.2.2@aar'

    //Jsoup 解析xml
    implementation 'org.jsoup:jsoup:1.10.3'

    //二维码扫描
    //https://github.com/bingoogolapple/BGAQRCode-Android
    implementation 'cn.bingoogolapple:bga-qrcodecore:1.1.9@aar'
    implementation 'cn.bingoogolapple:bga-zbar:1.1.9@aar'

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.tencent.bugly:crashreport:3.2.33'
    implementation 'com.tencent.bugly:nativecrashreport:3.7.1'

    // ARouter
    annotationProcessor "com.alibaba:arouter-compiler:${rootProject.arouterAnnotationVersion}"
}
